,Requriement,Test Cases
0,Generate test cases for a function that checks whether a number is prime.,"{'input': 2, 'expected': True}"
1,Generate test cases for a function that returns the factorial of a given number.,"[{'input': 0, 'expected': 1}, {'input': 1, 'expected': 1}, {'input': 2, 'expected': 2}, {'input': 3, 'expected': 6}, {'input': 5, 'expected': 120}, {'input': 10, 'expected': 3628800}, {'input': 20, 'expected': 2432902008176640000}, {'input': -1, 'expected': 'Invalid input: must be a non-negative integer'}, {'input': 2.5, 'expected': 'Invalid input: must be a non-negative integer'}, {'input': '5', 'expected': 'Invalid input: must be a non-negative integer'}, {'input': -3, 'expected': 'Invalid input: must be a non-negative integer'}, {'input': 5.5, 'expected': 'Invalid input: must be a non-negative integer'}]"
2,Generate test cases for a function that checks if a string is a palindrome.,"[{'input': 'madam', 'expected': True}, {'input': 'hello', 'expected': False}, {'input': '', 'expected': True}, {'input': 'a', 'expected': True}, {'input': 'abba', 'expected': True}, {'input': 'abcba', 'expected': True}, {'input': '12321', 'expected': True}, {'input': '12345', 'expected': False}, {'input': 'A man, a plan, a canal: Panama', 'expected': True}, {'input': 'RaceCar', 'expected': True}, {'input': 'Noon', 'expected': True}, {'input': 'Was it a car or a cat I saw?', 'expected': True}, {'input': '12345678987654321', 'expected': True}, {'input': '123456789', 'expected': False}, {'input': 'level', 'expected': True}, {'input': 'deed', 'expected': True}, {'input': 'civic', 'expected': True}, {'input': 'rotor', 'expected': True}, {'input': ""madam, in Eden, I'm Adam"", 'expected': True}, {'input': 'This is not a palindrome', 'expected': False}]"
3,Generate test cases for a function that sorts a list of integers in ascending order.,"[{'input': [3, 1, 4, 1, 5, 9], 'output': [1, 1, 3, 4, 5, 9]}, {'input': [], 'output': []}, {'input': [7], 'output': [7]}, {'input': [1, 2, 3, 4], 'output': [1, 2, 3, 4]}, {'input': [5, 4, 3, 2, 1], 'output': [1, 2, 3, 4, 5]}, {'input': [2, 2, 2], 'output': [2, 2, 2]}, {'input': [5, 3, 5, 1, 1], 'output': [1, 1, 3, 5, 5]}, {'input': [-3, -1, -4, -1, -5], 'output': [-5, -4, -3, -1, -1]}, {'input': [-2, 0, 3, -5, 2], 'output': [-5, -2, 0, 2, 3]}]"
4,Generate test cases for a function that validates whether a string is a valid date in the format YYYY-MM-DD.,"[{'input': '2023-10-05', 'expected': True}, {'input': '1999-12-31', 'expected': True}, {'input': '2000-02-29', 'expected': True}, {'input': '2023-13-05', 'expected': False}, {'input': '2023-02-30', 'expected': False}, {'input': '2023-04-31', 'expected': False}, {'input': '1900-02-29', 'expected': False}, {'input': '2023-06-31', 'expected': False}, {'input': '2023-11-31', 'expected': False}, {'input': '2023-00-15', 'expected': False}, {'input': '2023-01-01', 'expected': True}, {'input': '0000-01-01', 'expected': True}, {'input': '9999-12-31', 'expected': True}, {'input': '2023-05-32', 'expected': False}, {'input': '2023-02-29', 'expected': False}, {'input': '2023-01-0a', 'expected': False}, {'input': '2023/10/05', 'expected': False}, {'input': '2023-10-05T12:30', 'expected': False}, {'input': '2023-1-05', 'expected': False}, {'input': '2023-05-5', 'expected': False}, {'input': '2023-13-05', 'expected': False}, {'input': '2023-00-00', 'expected': False}, {'input': '2023-04-00', 'expected': False}, {'input': '2023-07-04', 'expected': True}, {'input': '2020-02-29', 'expected': True}, {'input': '2012-02-29', 'expected': True}, {'input': '2024-02-29', 'expected': True}, {'input': '2023-02-28', 'expected': True}, {'input': '2023-12-31', 'expected': True}, {'input': '2023-08-31', 'expected': True}, {'input': '2023-09-30', 'expected': True}, {'input': '2023-03-31', 'expected': True}, {'input': '2023-10-00', 'expected': False}]"
5,Generate test cases for a function that determines if two strings are anagrams.,"[{'input1': '', 'input2': '', 'expected': True}, {'input1': 'listen', 'input2': 'silent', 'expected': True}, {'input1': 'a', 'input2': 'b', 'expected': False}, {'input1': 'triangle', 'input2': 'integral', 'expected': True}, {'input1': 'hello', 'input2': 'world', 'expected': False}, {'input1': 'Listen', 'input2': 'silent', 'expected': True}, {'input1': 'Dormitory', 'input2': 'Dirty room', 'expected': False}, {'input1': 'The Morse Code', 'input2': 'Here come dots', 'expected': True}, {'input1': 'aabbcc', 'input2': 'ccbbaa', 'expected': True}, {'input1': 'abc', 'input2': 'abcd', 'expected': False}]"
6,"Generate test cases for a function that divides two numbers, including edge cases like division by zero.","{'name': 'Positive numbers', 'input_numerator': 6, 'input_denominator': 3, 'expected_result': 2, 'expected_error': None}"
7,Generate test cases for a function that returns the Nth Fibonacci number.,"[{'input': 0, 'output': 0}, {'input': 1, 'output': 1}, {'input': 2, 'output': 1}, {'input': 3, 'output': 2}, {'input': 4, 'output': 3}, {'input': 5, 'output': 5}, {'input': 10, 'output': 55}, {'input': 20, 'output': 6765}]"
8,Generate test cases for a function that finds the maximum value in a list.,"[{'input': [1, 2, 3], 'expected_output': 3}, {'input': [3, 1, 4, 1, 5], 'expected_output': 5}, {'input': [-5, -10, -3], 'expected_output': -3}, {'input': [-1, 0, 5], 'expected_output': 5}, {'input': [42], 'expected_output': 42}, {'input': [], 'expected_output': None}, {'input': [7, 7, 7], 'expected_output': 7}, {'input': [1000000000, 999999999, 1000000001], 'expected_output': 1000000001}, {'input': [-2, 0, 3], 'expected_output': 3}, {'input': [0], 'expected_output': 0}]"
9,Generate test cases for a function that reverses the words in a sentence.,"[{'input': 'Hello World', 'output': 'World Hello'}, {'input': 'This   is   a   test', 'output': 'test a is This'}, {'input': 'End with a period.', 'output': 'period. a with End'}, {'input': '', 'output': ''}, {'input': 'Alone', 'output': 'Alone'}, {'input': '  Leading and trailing  ', 'output': 'trailing and Leading  '}, {'input': 'Numbers 123 and symbols #', 'output': '# symbols and 123 Numbers'}, {'input': 'Bonjour le monde', 'output': 'monde le Bonjour'}]"
